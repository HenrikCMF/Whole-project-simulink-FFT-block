-- -------------------------------------------------------------
-- 
-- File Name: C:\dokumenter\FFTblock\simulinktest\TWDLROM_9_1.vhd
-- Created: 2022-05-03 14:26:35
-- 
-- Generated by MATLAB 9.11 and HDL Coder 3.19
-- 
-- -------------------------------------------------------------


-- -------------------------------------------------------------
-- 
-- Module: TWDLROM_9_1
-- Source Path: simulinktest/FFT_block/FFT HDL Optimized/TWDLROM_9_1
-- Hierarchy Level: 2
-- 
-- -------------------------------------------------------------
LIBRARY IEEE;
USE IEEE.std_logic_1164.ALL;
USE IEEE.numeric_std.ALL;
USE work.FFT_block_pac.ALL;

ENTITY TWDLROM_9_1 IS
  PORT( clk                               :   IN    std_logic;
        reset                             :   IN    std_logic;
        enb                               :   IN    std_logic;
        dout_8_1_vld                      :   IN    std_logic;
        twdl_9_re                         :   OUT   std_logic_vector(23 DOWNTO 0);  -- sfix24_En22
        twdl_9_im                         :   OUT   std_logic_vector(23 DOWNTO 0)  -- sfix24_En22
        );
END TWDLROM_9_1;


ARCHITECTURE rtl OF TWDLROM_9_1 IS

  -- Constants
  CONSTANT Twiddle_re_table_data          : vector_of_signed24(0 TO 63) := 
    (to_signed(16#400000#, 24), to_signed(16#3FFEC4#, 24), to_signed(16#3FFB11#, 24), to_signed(16#3FF4E6#, 24),
     to_signed(16#3FEC44#, 24), to_signed(16#3FE12B#, 24), to_signed(16#3FD39B#, 24), to_signed(16#3FC396#, 24),
     to_signed(16#3FB11B#, 24), to_signed(16#3F9C2C#, 24), to_signed(16#3F84C9#, 24), to_signed(16#3F6AF3#, 24),
     to_signed(16#3F4EAB#, 24), to_signed(16#3F2FF2#, 24), to_signed(16#3F0ECA#, 24), to_signed(16#3EEB33#, 24),
     to_signed(16#3EC530#, 24), to_signed(16#3E9CC0#, 24), to_signed(16#3E71E7#, 24), to_signed(16#3E44A6#, 24),
     to_signed(16#3E14FE#, 24), to_signed(16#3DE2F1#, 24), to_signed(16#3DAE82#, 24), to_signed(16#3D77B2#, 24),
     to_signed(16#3D3E83#, 24), to_signed(16#3D02F7#, 24), to_signed(16#3CC512#, 24), to_signed(16#3C84D5#, 24),
     to_signed(16#3C4242#, 24), to_signed(16#3BFD5D#, 24), to_signed(16#3BB627#, 24), to_signed(16#3B6CA5#, 24),
     to_signed(16#3B20D8#, 24), to_signed(16#3AD2C3#, 24), to_signed(16#3A826A#, 24), to_signed(16#3A2FCF#, 24),
     to_signed(16#39DAF6#, 24), to_signed(16#3983E2#, 24), to_signed(16#392A96#, 24), to_signed(16#38CF16#, 24),
     to_signed(16#387166#, 24), to_signed(16#381188#, 24), to_signed(16#37AF81#, 24), to_signed(16#374B55#, 24),
     to_signed(16#36E507#, 24), to_signed(16#367C9A#, 24), to_signed(16#361215#, 24), to_signed(16#35A579#, 24),
     to_signed(16#3536CC#, 24), to_signed(16#34C612#, 24), to_signed(16#34534F#, 24), to_signed(16#33DE88#, 24),
     to_signed(16#3367C1#, 24), to_signed(16#32EEFE#, 24), to_signed(16#327445#, 24), to_signed(16#31F799#, 24),
     to_signed(16#317901#, 24), to_signed(16#30F880#, 24), to_signed(16#30761C#, 24), to_signed(16#2FF1DA#, 24),
     to_signed(16#2F6BBE#, 24), to_signed(16#2EE3CF#, 24), to_signed(16#2E5A10#, 24), to_signed(16#2DCE89#, 24));  -- sfix24 [64]
  CONSTANT Twiddle_im_table_data          : vector_of_signed24(0 TO 63) := 
    (to_signed(16#000000#, 24), to_signed(-16#00C90F#, 24), to_signed(-16#019215#, 24),
     to_signed(-16#025B0D#, 24), to_signed(-16#0323ED#, 24), to_signed(-16#03ECAE#, 24),
     to_signed(-16#04B548#, 24), to_signed(-16#057DB4#, 24), to_signed(-16#0645EA#, 24),
     to_signed(-16#070DE1#, 24), to_signed(-16#07D594#, 24), to_signed(-16#089CF8#, 24),
     to_signed(-16#096408#, 24), to_signed(-16#0A2ABB#, 24), to_signed(-16#0AF10A#, 24),
     to_signed(-16#0BB6ED#, 24), to_signed(-16#0C7C5C#, 24), to_signed(-16#0D4150#, 24),
     to_signed(-16#0E05C1#, 24), to_signed(-16#0EC9A8#, 24), to_signed(-16#0F8CFD#, 24),
     to_signed(-16#104FB8#, 24), to_signed(-16#1111D2#, 24), to_signed(-16#11D344#, 24),
     to_signed(-16#129406#, 24), to_signed(-16#135411#, 24), to_signed(-16#14135D#, 24),
     to_signed(-16#14D1E2#, 24), to_signed(-16#158F9A#, 24), to_signed(-16#164C7E#, 24),
     to_signed(-16#170885#, 24), to_signed(-16#17C3A9#, 24), to_signed(-16#187DE3#, 24),
     to_signed(-16#19372A#, 24), to_signed(-16#19EF79#, 24), to_signed(-16#1AA6C8#, 24),
     to_signed(-16#1B5D10#, 24), to_signed(-16#1C124A#, 24), to_signed(-16#1CC66F#, 24),
     to_signed(-16#1D7977#, 24), to_signed(-16#1E2B5D#, 24), to_signed(-16#1EDC19#, 24),
     to_signed(-16#1F8BA5#, 24), to_signed(-16#2039F9#, 24), to_signed(-16#20E70F#, 24),
     to_signed(-16#2192E1#, 24), to_signed(-16#223D67#, 24), to_signed(-16#22E69B#, 24),
     to_signed(-16#238E76#, 24), to_signed(-16#2434F3#, 24), to_signed(-16#24DA0B#, 24),
     to_signed(-16#257DB6#, 24), to_signed(-16#261FF0#, 24), to_signed(-16#26C0B1#, 24),
     to_signed(-16#275FF4#, 24), to_signed(-16#27FDB3#, 24), to_signed(-16#2899E6#, 24),
     to_signed(-16#293489#, 24), to_signed(-16#29CD95#, 24), to_signed(-16#2A6505#, 24),
     to_signed(-16#2AFAD2#, 24), to_signed(-16#2B8EF7#, 24), to_signed(-16#2C216F#, 24),
     to_signed(-16#2CB232#, 24));  -- sfix24 [64]

  -- Functions
  -- HDLCODER_TO_STDLOGIC 
  FUNCTION hdlcoder_to_stdlogic(arg: boolean) RETURN std_logic IS
  BEGIN
    IF arg THEN
      RETURN '1';
    ELSE
      RETURN '0';
    END IF;
  END FUNCTION;


  -- Signals
  SIGNAL Radix22TwdlMapping_cnt           : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Radix22TwdlMapping_phase         : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw  : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdlAddrMap   : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Radix22TwdlMapping_twdl45Reg     : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1      : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2      : std_logic;
  SIGNAL Radix22TwdlMapping_cnt_next      : unsigned(6 DOWNTO 0);  -- ufix7
  SIGNAL Radix22TwdlMapping_phase_next    : unsigned(1 DOWNTO 0);  -- ufix2
  SIGNAL Radix22TwdlMapping_octantReg1_next : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL Radix22TwdlMapping_twdlAddr_raw_next : unsigned(8 DOWNTO 0);  -- ufix9
  SIGNAL Radix22TwdlMapping_twdlAddrMap_next : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL Radix22TwdlMapping_twdl45Reg_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg1_next : std_logic;
  SIGNAL Radix22TwdlMapping_dvldReg2_next : std_logic;
  SIGNAL twdlAddr                         : unsigned(5 DOWNTO 0);  -- ufix6
  SIGNAL twdlAddrVld                      : std_logic;
  SIGNAL twdlOctant                       : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45                           : std_logic;
  SIGNAL twiddleS_re                      : signed(23 DOWNTO 0);  -- sfix24_En22
  SIGNAL twiddleReg_re                    : signed(23 DOWNTO 0);  -- sfix24_En22
  SIGNAL twiddleS_im                      : signed(23 DOWNTO 0);  -- sfix24_En22
  SIGNAL twiddleReg_im                    : signed(23 DOWNTO 0);  -- sfix24_En22
  SIGNAL twdlOctantReg                    : unsigned(2 DOWNTO 0);  -- ufix3
  SIGNAL twdl45Reg                        : std_logic;
  SIGNAL twdl_9_re_tmp                    : signed(23 DOWNTO 0);  -- sfix24_En22
  SIGNAL twdl_9_im_tmp                    : signed(23 DOWNTO 0);  -- sfix24_En22

BEGIN
  -- Radix22TwdlMapping
  Radix22TwdlMapping_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      Radix22TwdlMapping_octantReg1 <= to_unsigned(16#0#, 3);
      Radix22TwdlMapping_twdlAddr_raw <= to_unsigned(16#000#, 9);
      Radix22TwdlMapping_twdlAddrMap <= to_unsigned(16#00#, 6);
      Radix22TwdlMapping_twdl45Reg <= '0';
      Radix22TwdlMapping_dvldReg1 <= '0';
      Radix22TwdlMapping_dvldReg2 <= '0';
      Radix22TwdlMapping_cnt <= to_unsigned(16#00#, 7);
      Radix22TwdlMapping_phase <= to_unsigned(16#0#, 2);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        Radix22TwdlMapping_cnt <= Radix22TwdlMapping_cnt_next;
        Radix22TwdlMapping_phase <= Radix22TwdlMapping_phase_next;
        Radix22TwdlMapping_octantReg1 <= Radix22TwdlMapping_octantReg1_next;
        Radix22TwdlMapping_twdlAddr_raw <= Radix22TwdlMapping_twdlAddr_raw_next;
        Radix22TwdlMapping_twdlAddrMap <= Radix22TwdlMapping_twdlAddrMap_next;
        Radix22TwdlMapping_twdl45Reg <= Radix22TwdlMapping_twdl45Reg_next;
        Radix22TwdlMapping_dvldReg1 <= Radix22TwdlMapping_dvldReg1_next;
        Radix22TwdlMapping_dvldReg2 <= Radix22TwdlMapping_dvldReg2_next;
      END IF;
    END IF;
  END PROCESS Radix22TwdlMapping_process;

  Radix22TwdlMapping_output : PROCESS (Radix22TwdlMapping_cnt, Radix22TwdlMapping_dvldReg1,
       Radix22TwdlMapping_dvldReg2, Radix22TwdlMapping_octantReg1,
       Radix22TwdlMapping_phase, Radix22TwdlMapping_twdl45Reg,
       Radix22TwdlMapping_twdlAddrMap, Radix22TwdlMapping_twdlAddr_raw,
       dout_8_1_vld)
    VARIABLE octant : unsigned(2 DOWNTO 0);
    VARIABLE cnt_cast : unsigned(8 DOWNTO 0);
    VARIABLE sub_cast : signed(19 DOWNTO 0);
    VARIABLE sub_temp : signed(19 DOWNTO 0);
    VARIABLE sub_cast_0 : signed(10 DOWNTO 0);
    VARIABLE sub_temp_0 : signed(10 DOWNTO 0);
    VARIABLE sub_cast_1 : signed(10 DOWNTO 0);
    VARIABLE sub_temp_1 : signed(10 DOWNTO 0);
    VARIABLE sub_cast_2 : signed(19 DOWNTO 0);
    VARIABLE sub_temp_2 : signed(19 DOWNTO 0);
    VARIABLE sub_cast_3 : signed(19 DOWNTO 0);
    VARIABLE sub_temp_3 : signed(19 DOWNTO 0);
  BEGIN
    sub_temp := to_signed(16#00000#, 20);
    sub_temp_0 := to_signed(16#000#, 11);
    sub_temp_1 := to_signed(16#000#, 11);
    sub_temp_2 := to_signed(16#00000#, 20);
    sub_temp_3 := to_signed(16#00000#, 20);
    cnt_cast := to_unsigned(16#000#, 9);
    sub_cast := to_signed(16#00000#, 20);
    sub_cast_0 := to_signed(16#000#, 11);
    sub_cast_1 := to_signed(16#000#, 11);
    sub_cast_2 := to_signed(16#00000#, 20);
    sub_cast_3 := to_signed(16#00000#, 20);
    Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt;
    Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase;
    Radix22TwdlMapping_twdlAddr_raw_next <= Radix22TwdlMapping_twdlAddr_raw;
    Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddrMap;
    Radix22TwdlMapping_twdl45Reg_next <= Radix22TwdlMapping_twdl45Reg;
    Radix22TwdlMapping_dvldReg2_next <= Radix22TwdlMapping_dvldReg1;
    Radix22TwdlMapping_dvldReg1_next <= dout_8_1_vld;
    CASE Radix22TwdlMapping_twdlAddr_raw IS
      WHEN "001000000" =>
        octant := to_unsigned(16#0#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "010000000" =>
        octant := to_unsigned(16#1#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "011000000" =>
        octant := to_unsigned(16#2#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN "100000000" =>
        octant := to_unsigned(16#3#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
      WHEN "101000000" =>
        octant := to_unsigned(16#4#, 3);
        Radix22TwdlMapping_twdl45Reg_next <= '1';
      WHEN OTHERS => 
        octant := Radix22TwdlMapping_twdlAddr_raw(8 DOWNTO 6);
        Radix22TwdlMapping_twdl45Reg_next <= '0';
    END CASE;
    Radix22TwdlMapping_octantReg1_next <= octant;
    CASE octant IS
      WHEN "000" =>
        Radix22TwdlMapping_twdlAddrMap_next <= Radix22TwdlMapping_twdlAddr_raw(5 DOWNTO 0);
      WHEN "001" =>
        sub_cast_0 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 11));
        sub_temp_0 := to_signed(16#080#, 11) - sub_cast_0;
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_0(5 DOWNTO 0));
      WHEN "010" =>
        sub_cast_1 := signed(resize(Radix22TwdlMapping_twdlAddr_raw, 11));
        sub_temp_1 := sub_cast_1 - to_signed(16#080#, 11);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_1(5 DOWNTO 0));
      WHEN "011" =>
        sub_cast_2 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0', 20));
        sub_temp_2 := to_signed(16#04000#, 20) - sub_cast_2;
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_2(11 DOWNTO 6));
      WHEN "100" =>
        sub_cast_3 := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0', 20));
        sub_temp_3 := sub_cast_3 - to_signed(16#04000#, 20);
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp_3(11 DOWNTO 6));
      WHEN OTHERS => 
        sub_cast := signed(resize(Radix22TwdlMapping_twdlAddr_raw & '0' & '0' & '0' & '0' & '0' & '0', 20));
        sub_temp := to_signed(16#06000#, 20) - sub_cast;
        Radix22TwdlMapping_twdlAddrMap_next <= unsigned(sub_temp(11 DOWNTO 6));
    END CASE;
    IF Radix22TwdlMapping_phase = to_unsigned(16#0#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= to_unsigned(16#000#, 9);
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#1#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 9) sll 1;
    ELSIF Radix22TwdlMapping_phase = to_unsigned(16#2#, 2) THEN 
      Radix22TwdlMapping_twdlAddr_raw_next <= resize(Radix22TwdlMapping_cnt, 9);
    ELSE 
      cnt_cast := resize(Radix22TwdlMapping_cnt, 9);
      Radix22TwdlMapping_twdlAddr_raw_next <= (cnt_cast sll 1) + cnt_cast;
    END IF;
    IF (dout_8_1_vld AND hdlcoder_to_stdlogic(Radix22TwdlMapping_cnt > to_unsigned(16#3F#, 7))) = '1' THEN 
      Radix22TwdlMapping_phase_next <= Radix22TwdlMapping_phase + to_unsigned(16#1#, 2);
    END IF;
    IF dout_8_1_vld = '1' THEN 
      Radix22TwdlMapping_cnt_next <= Radix22TwdlMapping_cnt + to_unsigned(16#40#, 7);
    END IF;
    twdlAddr <= Radix22TwdlMapping_twdlAddrMap;
    twdlAddrVld <= Radix22TwdlMapping_dvldReg2;
    twdlOctant <= Radix22TwdlMapping_octantReg1;
    twdl45 <= Radix22TwdlMapping_twdl45Reg;
  END PROCESS Radix22TwdlMapping_output;


  -- Twiddle ROM1
  twiddleS_re <= Twiddle_re_table_data(to_integer(twdlAddr));

  TWIDDLEROM_RE_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      twiddleReg_re <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        twiddleReg_re <= twiddleS_re;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_RE_process;


  -- Twiddle ROM2
  twiddleS_im <= Twiddle_im_table_data(to_integer(twdlAddr));

  TWIDDLEROM_IM_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      twiddleReg_im <= to_signed(16#000000#, 24);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        twiddleReg_im <= twiddleS_im;
      END IF;
    END IF;
  END PROCESS TWIDDLEROM_IM_process;


  intdelay_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      twdlOctantReg <= to_unsigned(16#0#, 3);
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        twdlOctantReg <= twdlOctant;
      END IF;
    END IF;
  END PROCESS intdelay_process;


  intdelay_1_process : PROCESS (clk, reset)
  BEGIN
    IF reset = '1' THEN
      twdl45Reg <= '0';
    ELSIF clk'EVENT AND clk = '1' THEN
      IF enb = '1' THEN
        twdl45Reg <= twdl45;
      END IF;
    END IF;
  END PROCESS intdelay_1_process;


  -- Radix22TwdlOctCorr
  Radix22TwdlOctCorr_output : PROCESS (twdl45Reg, twdlOctantReg, twiddleReg_im, twiddleReg_re)
    VARIABLE twdlIn_re : signed(23 DOWNTO 0);
    VARIABLE twdlIn_im : signed(23 DOWNTO 0);
    VARIABLE cast : signed(24 DOWNTO 0);
    VARIABLE cast_0 : signed(24 DOWNTO 0);
    VARIABLE cast_1 : signed(24 DOWNTO 0);
    VARIABLE cast_2 : signed(24 DOWNTO 0);
    VARIABLE cast_3 : signed(24 DOWNTO 0);
    VARIABLE cast_4 : signed(24 DOWNTO 0);
    VARIABLE cast_5 : signed(24 DOWNTO 0);
    VARIABLE cast_6 : signed(24 DOWNTO 0);
    VARIABLE cast_7 : signed(24 DOWNTO 0);
    VARIABLE cast_8 : signed(24 DOWNTO 0);
    VARIABLE cast_9 : signed(24 DOWNTO 0);
    VARIABLE cast_10 : signed(24 DOWNTO 0);
  BEGIN
    cast_0 := to_signed(16#0000000#, 25);
    cast_2 := to_signed(16#0000000#, 25);
    cast_4 := to_signed(16#0000000#, 25);
    cast_6 := to_signed(16#0000000#, 25);
    cast_8 := to_signed(16#0000000#, 25);
    cast_10 := to_signed(16#0000000#, 25);
    cast := to_signed(16#0000000#, 25);
    cast_1 := to_signed(16#0000000#, 25);
    cast_3 := to_signed(16#0000000#, 25);
    cast_5 := to_signed(16#0000000#, 25);
    cast_7 := to_signed(16#0000000#, 25);
    cast_9 := to_signed(16#0000000#, 25);
    twdlIn_re := twiddleReg_re;
    twdlIn_im := twiddleReg_im;
    IF twdl45Reg = '1' THEN 
      CASE twdlOctantReg IS
        WHEN "000" =>
          twdlIn_re := to_signed(16#2D413D#, 24);
          twdlIn_im := to_signed(-16#2D413D#, 24);
        WHEN "010" =>
          twdlIn_re := to_signed(-16#2D413D#, 24);
          twdlIn_im := to_signed(-16#2D413D#, 24);
        WHEN "100" =>
          twdlIn_re := to_signed(-16#2D413D#, 24);
          twdlIn_im := to_signed(16#2D413D#, 24);
        WHEN OTHERS => 
          twdlIn_re := to_signed(16#2D413D#, 24);
          twdlIn_im := to_signed(-16#2D413D#, 24);
      END CASE;
    ELSE 
      CASE twdlOctantReg IS
        WHEN "000" =>
          NULL;
        WHEN "001" =>
          cast := resize(twiddleReg_im, 25);
          cast_0 :=  - (cast);
          twdlIn_re := cast_0(23 DOWNTO 0);
          cast_5 := resize(twiddleReg_re, 25);
          cast_6 :=  - (cast_5);
          twdlIn_im := cast_6(23 DOWNTO 0);
        WHEN "010" =>
          twdlIn_re := twiddleReg_im;
          cast_7 := resize(twiddleReg_re, 25);
          cast_8 :=  - (cast_7);
          twdlIn_im := cast_8(23 DOWNTO 0);
        WHEN "011" =>
          cast_1 := resize(twiddleReg_re, 25);
          cast_2 :=  - (cast_1);
          twdlIn_re := cast_2(23 DOWNTO 0);
          twdlIn_im := twiddleReg_im;
        WHEN "100" =>
          cast_3 := resize(twiddleReg_re, 25);
          cast_4 :=  - (cast_3);
          twdlIn_re := cast_4(23 DOWNTO 0);
          cast_9 := resize(twiddleReg_im, 25);
          cast_10 :=  - (cast_9);
          twdlIn_im := cast_10(23 DOWNTO 0);
        WHEN OTHERS => 
          twdlIn_re := twiddleReg_im;
          twdlIn_im := twiddleReg_re;
      END CASE;
    END IF;
    twdl_9_re_tmp <= twdlIn_re;
    twdl_9_im_tmp <= twdlIn_im;
  END PROCESS Radix22TwdlOctCorr_output;


  twdl_9_re <= std_logic_vector(twdl_9_re_tmp);

  twdl_9_im <= std_logic_vector(twdl_9_im_tmp);

END rtl;

